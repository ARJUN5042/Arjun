Q8. What is SQL Key Constraints writing an Example of SQL Key Constraints?

Answer:
	Constraints in SQL means we are applying certain conditions or restrictions on the database. 
	This further means that before inserting data into the database, we are checking for some conditions. 
	If the condition we have applied to the database holds true for the data which is to be inserted, then only 
	the data will be inserted into the database tables.

Constraints in SQL can be categorized into two types:

1. Column Level Constraint:
	Column Level Constraint is used to apply a constraint on a single column.
2. Table Level Constraint:
	Table Level Constraint is used to apply a constraint on multiple columns.

Some of the real-life examples of constraints are as follows:
1. Every person has a unique email id. This is because while creating an email account for any user, the email providing 
   services such as Gmail, Yahoo or any other email providing service will always check for the availability of the email id 
   that the user wants for himself. If some other user already takes the email id that the user wants, then that id cannot be 
   assigned to another user. This simply means that no two users can have the same email ids on the same email providing service. 
   So, here the email id is the constraint on the database of email providing services.

2. Whenever we set a password for any system, there are certain constraints that are to be followed. These constraints 
   may include the following:
->There must be one uppercase character in the password.
->Password must be of at least eight characters in length.
->Password must contain at least one special symbol.

Constraints available in SQL are:
1. NOT NULL
2. UNIQUE
3. PRIMARY KEY
4. FOREIGN KEY
5. CHECK
6. DEFAULT
7. CREATE INDEX

1. NOT NULL
->NULL means empty, i.e., the value is not available.
->Whenever a table's column is declared as NOT NULL, then the value for that column cannot be empty for any of the table's records.
->There must exist a value in the column to which the NOT NULL constraint is applied.

Syntax:
CREATE TABLE TableName (ColumnName1 datatype NOT NULL, ColumnName2 datatype,…., ColumnNameN datatype);

Example:
Create a student table and apply a NOT NULL constraint on one of the table's column while creating a table.

CREATE TABLE student
(
StudentID INT NOT NULL, 
Student_FirstName VARCHAR(20), 
Student_LastName VARCHAR(20), 
Student_PhoneNumber VARCHAR(20), 
Student_Email_ID VARCHAR(40)
);

To verify that the not null constraint is applied to the table's column and the student table is created successfully, 
we will execute the following query: mysql> DESC student;

2. UNIQUE
->Duplicate values are not allowed in the columns to which the UNIQUE constraint is applied.
->The column with the unique constraint will always contain a unique value.
->This constraint can be applied to one or more than one column of a table, which means more than one unique constraint 
  can exist on a single table.
->Using the UNIQUE constraint, you can also modify the already created tables.

Syntax:
CREATE TABLE TableName (ColumnName1 datatype UNIQUE, ColumnName2 datatype,…., ColumnNameN datatype);

Example:
CREATE TABLE student
(
StudentID INT UNIQUE, 
Student_FirstName VARCHAR(20), 
Student_LastName VARCHAR(20), 
Student_PhoneNumber VARCHAR(20), 
Student_Email_ID VARCHAR(40)
);

3. PRIMARY KEY
->PRIMARY KEY Constraint is a combination of NOT NULL and Unique constraints.
->NOT NULL constraint and a UNIQUE constraint together forms a PRIMARY constraint.
->The column to which we have applied the primary constraint will always contain a unique value 
  and will not allow null values.

Syntax:
CREATE TABLE TableName (ColumnName1 datatype PRIMARY KEY, ColumnName2 datatype,…., ColumnNameN datatype);

4. FOREIGN KEY
->A foreign key is used for referential integrity.
->When we have two tables, and one table takes reference from another table, i.e., the same column is present in both 
the tables and that column acts as a primary key in one table. That particular column will act as a foreign key in another table.

Syntax:
CREATE TABLE tablename
(
ColumnName1 Datatype(SIZE) PRIMARY KEY, 
ColumnNameN Datatype(SIZE), 
FOREIGN KEY( ColumnName ) REFERENCES PARENT_TABLE_NAME(Primary_Key_ColumnName)
);